/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as charactersIndexImport } from './routes/(characters)/index'
import { Route as charactersCharacterIdImport } from './routes/(characters)/$characterId'

// Create/Update Routes

const charactersIndexRoute = charactersIndexImport.update({
  id: '/(characters)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const charactersCharacterIdRoute = charactersCharacterIdImport.update({
  id: '/(characters)/$characterId',
  path: '/$characterId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(characters)/$characterId': {
      id: '/(characters)/$characterId'
      path: '/$characterId'
      fullPath: '/$characterId'
      preLoaderRoute: typeof charactersCharacterIdImport
      parentRoute: typeof rootRoute
    }
    '/(characters)/': {
      id: '/(characters)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof charactersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$characterId': typeof charactersCharacterIdRoute
  '/': typeof charactersIndexRoute
}

export interface FileRoutesByTo {
  '/$characterId': typeof charactersCharacterIdRoute
  '/': typeof charactersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(characters)/$characterId': typeof charactersCharacterIdRoute
  '/(characters)/': typeof charactersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$characterId' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$characterId' | '/'
  id: '__root__' | '/(characters)/$characterId' | '/(characters)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  charactersCharacterIdRoute: typeof charactersCharacterIdRoute
  charactersIndexRoute: typeof charactersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  charactersCharacterIdRoute: charactersCharacterIdRoute,
  charactersIndexRoute: charactersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(characters)/$characterId",
        "/(characters)/"
      ]
    },
    "/(characters)/$characterId": {
      "filePath": "(characters)/$characterId.tsx"
    },
    "/(characters)/": {
      "filePath": "(characters)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
